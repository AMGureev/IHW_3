.include "macro-syscalls.m"

.eqv    BUF_SIZE 10
.eqv    NAME_SIZE 256	# Размер буфера для имени файла
.eqv    TEXT_SIZE 512	# Размер буфера для текста

.data
buf1:    .space BUF_SIZE     # Буфер для первой строки
buf2:    .space BUF_SIZE     # Буфер для второй строки
buf3:    .space BUF_SIZE     # Буфер для третьей строки
buf4:    .space BUF_SIZE     # Буфер для четвертой строки
buf5:    .space BUF_SIZE     # Буфер для пятой строки
strbuf:  .space TEXT_SIZE   # Буфер для читаемого текста
str_copy: .space BUF_SIZE # Буфер для строки - среза.
mes:   .asciz "Введите ваше ключевое слово"
mes_file:   .asciz "Введите адрес файла"
er_name_mes:    .asciz "Incorrect file name\n"
er_read_mes:    .asciz "Incorrect read operation\n"
enter: 		.asciz "\n"
space:		.asciz " "
file_name:      .space	NAME_SIZE		# Имя читаемого файла
output_str_buf1: 	.space NAME_SIZE
output_str_buf2: 	.space NAME_SIZE
output_str_buf3: 	.space NAME_SIZE
output_str_buf4: 	.space NAME_SIZE
output_str_buf5: 	.space NAME_SIZE
result: 			.space TEXT_SIZE
.text
strcmp:
loop:
    lb      t0 (a0)     # Загрузка символа из 1-й строки для сравнения
    lb      t1 (a1)     # Загрузка символа из 2-й строки для сравнения
    beqz    t0 end      # Конец строки 1
    beqz    t1 end      # Конец строки 2
    bne     t0 t1 end   # Выход по неравенству
    addi    a0 a0 1     # Адрес символа в строке 1 увеличивается на 1
    addi    a1 a1 1     # Адрес символа в строке 2 увеличивается на 1
    b       loop
end:
    sub     a0 t0 t1    # Получение разности между символами
    ret

strlen:
    li      t0 0        # Счетчик
loop1:
    lb      t1 (a6)   # Загрузка символа для сравнения
    beqz    t1 end1
    addi    t0 t0 1		# Счетчик символов увеличивается на 1
    addi    a6 a6 1		# Берется следующий символ
    b       loop1
end1:
    mv      a6 t0
    ret

_strcpy: # Копирование строки
	mv t0 a0 # В t0 загружаем адрес строки, котрая будет скопирована
	mv t1 a1 # В t1 загружаем адрес строки, в которую будет происходить копирование
	loop2: # Цикл для копирования каждого символа
	lb t2 (t0) # Загружаем в t2 символ для копировнаия
	sb t2 (t1) # Копируем в строку-копию соответствующий символ из входной строки
	beqz t2 end2 # Если наткнулись на ноль-символ, то прекратить копирование
	addi t0 t0 1 # Сдвигаемся по строке на 1 символ вперед
	addi t1 t1 1 # Сдвигаемся по строке-копии на 1 символ вперед
	j loop2
	end2:
	ret

.globl main
main:

    # Ввод строки 1 в буфер buf1
    str_get(buf1, BUF_SIZE, mes)
    # Ввод строки 2 в буфер buf2
    str_get(buf2, BUF_SIZE, mes)
    # Сравнение строк в буферах
    # Вывод результата сравнения
    # Ввод имени файла с консоли эмулятора
    back:
    str_get(file_name, NAME_SIZE, mes_file)
    open(file_name, READ_ONLY)
    li		s1 -1			# Проверка на корректное открытие
    beq		a0 s1 er_name	# Ошибка открытия файла
    mv   	s0 a0       	# Сохранение дескриптора файла
    ###############################################################
    # Выделение начального блока памяти для для буфера в куче
    allocate(TEXT_SIZE)		# Результат хранится в a0
    mv 		s3, a0			# Сохранение адреса кучи в регистре
    mv 		s5, a0			# Сохранение изменяемого адреса кучи в регистре
    li		s4, TEXT_SIZE	# Сохранение константы для обработки
    mv		s6, zero		# Установка начальной длины прочитанного текста
    ###############################################################
read_loop:
    # Чтение информации из открытого файла
    ###read(s0, strbuf, TEXT_SIZE)
    read_addr_reg(s0, s5, TEXT_SIZE) # чтение для адреса блока из регистра
    # Проверка на корректное чтение
    beq		a0 s1 er_read	# Ошибка чтения
    mv   	s2 a0       	# Сохранение длины текста
    add 	s6, s6, s2		# Размер текста увеличивается на прочитанную порцию
    # При длине прочитанного текста меньшей, чем размер буфера,
    # необходимо завершить процесс.
    bne		s2 s4 end_loop
    # Иначе расширить буфер и повторить
    allocate(TEXT_SIZE)		# Результат здесь не нужен, но если нужно то...
    add		s5 s5 s2		# Адрес для чтения смещается на размер порции
    b read_loop				# Обработка следующей порции текста из файла
end_loop:
    ###############################################################
    # Закрытие файла
    close(s0)
    #li   a7, 57       # Системный вызов закрытия файла
    #mv   a0, s0       # Дескриптор файла
    #ecall             # Закрытие файла
    ###############################################################
    # Установка нуля в конце прочитанной строки
    ###la	t0 strbuf	 # Адрес начала буфера
    mv	t0 s3		# Адрес буфера в куче
    add t0 t0 s6	# Адрес последнего прочитанного символа
    addi t0 t0 1	# Место для нуля
    sb	zero (t0)	# Запись нуля в конец текста
    ###############################################################
    # Вывод текста на консоль
    ###la 	a0 strbuf
    mv	a0	s3	# Адрес начала буфера из кучи
    li 	a7 4
    ecall
    find_count buf1
    li      t5 1234          # Пример целого числа
    la      t6 output_str_buf1    # Адрес строки для сохранения результата
    int_to_str t6 t5        # Вызов макроса
    la a0 output_str_buf1
    li a7 4
    ecall
    str_get(file_name, NAME_SIZE, mes_file) # Ввод имени файла с консоли эмулятора
    open(file_name, APPEND)
    li		s1 -1			# Проверка на корректное открытие
    beq		a0 s1 er_name	# Ошибка открытия файла
mv   	s0 a0       	# Сохранение дескриптора файла
	# Запись информации в открытый файл
mv   a0, s0 			# Дескриптор файла
    print_to_file
    exit
er_name:
    error_message er_name_mes
    # И завершение программы
    j back
er_read:
    # Сообщение об ошибочном чтении
    error_message er_read_mes
    # И завершение программы
    j back
